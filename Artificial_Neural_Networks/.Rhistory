data = read.csv("C:\\Users\\Admin\Downloads\Data_Preprocessing\\Data.csv")
data = read.csv("C:\\Users\\Admin\\Downloads\\Data_Preprocessing\\Data.csv")
View(data)
dataset = read.csv("C:\\Users\\Admin\\Downloads\\Data_Preprocessing\\Data.csv")
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN=function(x) mean(x, na.rm = TRUE)), dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)), dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country, levels=c('France','Spain','Germany'), labels=c(1,2,3))
dataset$Purchased = factor(dataset$Purchased, levels=c('Yes','No'), labels=c(1,0))
#Split training and test sets
install.packages('caTools')
library("caTools", lib.loc="C:/Program Files/R/R-3.4.2/library")
library('caTools')
library(caTools)
set.seed(0)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set =subset(dataset, split==TRUE)
View(training_set)
test_set = subset(dataset, split==FALSE)
View(test_set)
test_set = scale(test_set)
View(training_set)
View(training_set)
View(training_set)
test_set[,2:3]= scale(test_set[,2:3])
View(test_set)
View(test_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3]= scale(test_set[,2:3])
View(training_set)
View(training_set)
dataset = dataset[,4:14]
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
dataset = read.csv("Churn_Modelling.csv")
setwd("D:/Udemy_ML/Artificial_Neural_Networks")
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
View(dataset)
View(dataset)
View(dataset)
table(dataset$Geography)
dataset$Gender = as.numeric(factor(dataset$Gender, levels=c('Male', 'Female'), labels=c(0,1)))
dataset$Geography = as.numeric(factor(dataset$Geography, levels=c('France','Germany','Spain'), labels = c(1,2,3)))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
training_set[,-11] = scale(training_set[,-11])
test_set[,-11]= scale(test_set[,-11])
View(test_set)
View(test_set)
install.packages('h2o')
library(h2o)
h2o.init(n_threads = -1)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y =  training_set$Exited,
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
classifier
View(training_set)
View(training_set)
dataset$Exited = as.numeric(factor(dataset$Exited, levels= c('0','1'), labels = c(0,1)))
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
training_set[,-11] = scale(training_set[,-11])
test_set[,-11]= scale(test_set[,-11])
classifier = h2o.deeplearning(y =  training_set$Exited,
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
dataset$Exited = factor(dataset$Exited, levels= c('0','1'), labels = c(0,1))
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
training_set[,-11] = scale(training_set[,-11])
test_set[,-11]= scale(test_set[,-11])
classifier = h2o.deeplearning(y =  training_set$Exited,
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
dataset$Gender = as.numeric(factor(dataset$Gender, levels=c('Male', 'Female'), labels=c(0,1)))
dataset$Geography = as.numeric(factor(dataset$Geography, levels=c('France','Germany','Spain'), labels = c(1,2,3)))
dataset$Exited = factor(dataset$Exited, levels= c('0','1'), labels = c(0,1))
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
training_set[,-11] = scale(training_set[,-11])
test_set[,-11]= scale(test_set[,-11])
classifier = h2o.deeplearning(y =  training_set$Exited,
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
View(training_set)
dataset$Exited = factor(dataset$Exited, levels= c(0,1), labels = c(0,1))
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
training_set[,-11] = scale(training_set[,-11])
test_set[,-11]= scale(test_set[,-11])
classifier = h2o.deeplearning(y =  training_set$Exited,
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
classifier = h2o.deeplearning(y =  11,
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
classifier
prob_pred= h2o.predict(classifier, newdata= test_set[-11])
prob_pred= h2o.predict(classifier, newdata= as.h2o(test_set[-11]))
View(prob_pred)
y_pred= ifelse(prob_pred>0.5, 1, 0)
y_pred= (prob_pred>0.5)
y_pred = as.vector(y_pred)
y_pred
prob_pred= h2o.predict(classifier, newdata= as.h2o(test_set[-11]))
y_pred= (prob_pred>0.5)
y_pred = as.vector(y_pred)
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
dataset$Gender = as.numeric(factor(dataset$Gender, levels=c('Male', 'Female'), labels=c(0,1)))
dataset$Geography = as.numeric(factor(dataset$Geography, levels=c('France','Germany','Spain'), labels = c(1,2,3)))
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
training_set[,-11] = scale(training_set[,-11])
test_set[,-11]= scale(test_set[,-11])
classifier = h2o.deeplearning(y =  'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred= h2o.predict(classifier, newdata= as.h2o(test_set[-11]))
y_pred= (prob_pred>0.5)
y_pred = as.vector(y_pred)
#confusion matrix
cm = table(test_set[,11], y_pred)
cm
(1543+185)/2000
h2o.shutdown()
