data = read.csv("C:\\Users\\Admin\Downloads\Data_Preprocessing\\Data.csv")
data = read.csv("C:\\Users\\Admin\\Downloads\\Data_Preprocessing\\Data.csv")
View(data)
dataset = read.csv("C:\\Users\\Admin\\Downloads\\Data_Preprocessing\\Data.csv")
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN=function(x) mean(x, na.rm = TRUE)), dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)), dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country, levels=c('France','Spain','Germany'), labels=c(1,2,3))
dataset$Purchased = factor(dataset$Purchased, levels=c('Yes','No'), labels=c(1,0))
#Split training and test sets
install.packages('caTools')
library("caTools", lib.loc="C:/Program Files/R/R-3.4.2/library")
library('caTools')
library(caTools)
set.seed(0)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set =subset(dataset, split==TRUE)
View(training_set)
test_set = subset(dataset, split==FALSE)
View(test_set)
test_set = scale(test_set)
View(training_set)
View(training_set)
View(training_set)
test_set[,2:3]= scale(test_set[,2:3])
View(test_set)
View(test_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3]= scale(test_set[,2:3])
View(training_set)
View(training_set)
setwd("D:/Udemy_ML/R/Data_Preprocessing")
dataset = read.csv("C:\\Users\\Admin\\Downloads\\Data_Preprocessing\\Salary_Data.csv")
setwd("D:/Udemy_ML/R")
dataset = read.csv("Salary_Data.csv")
setwd("D:/Udemy_ML/R/Data_Preprocessing")
#Split training and test sets
install.packages('caTools')
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
#Split training and test sets
install.packages('caTools')
dataset = read.csv("Salary_Data.csv")
#dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN=function(x) mean(x, na.rm = TRUE)), dataset$Age)
#dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)), dataset$Salary)
#dataset$Country = factor(dataset$Country, levels=c('France','Spain','Germany'), labels=c(1,2,3))
#dataset$Purchased = factor(dataset$Purchased, levels=c('Yes','No'), labels=c(1,0))
#Split training and test sets
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
View(dataset)
View(dataset)
setwd("D:/Udemy_ML/Simple_Linear_Regression")
dataset = read.csv("Salary_Data.csv")
#dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN=function(x) mean(x, na.rm = TRUE)), dataset$Age)
#dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)), dataset$Salary)
#dataset$Country = factor(dataset$Country, levels=c('France','Spain','Germany'), labels=c(1,2,3))
#dataset$Purchased = factor(dataset$Purchased, levels=c('Yes','No'), labels=c(1,0))
#Split training and test sets
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
install.packages("caTools")
View(dataset)
View(dataset)
View(data)
View(data)
View(data)
regressor= lm(formula = Salary ~ YearsExperience , training_set)
View(regressor)
summary(regressor)
y_pred= predict(regressor, newdata = test_set)
y_pred
install.packages('ggplot2')
library('ggplot2')
library("ggplot2", lib.loc="C:/Program Files/R/R-3.4.2/library")
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')
install.packages('ggplot2', dependencies = true)
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')
install.packages('ggplot2', dependencies = true)
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')
install.packages('ggplot2', dependencies = TRUE)
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')
install.packages('ggplot2', dependencies = TRUE)
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')
install.packages("C:\Users\Admin\Downloads\colorspace_1.3-2.zip")
install.packages("C:\\Users\\Admin\\Downloads\\colorspace_1.3-2.zip")
install.packages("C:\\Users\\Admin\\Downloads\\colorspace")
install.packages("C:\\Users\\Admin\\Downloads\\colorspace_1.3-2(1).zip")
install.packages("C:\\Users\\Admin\\Downloads\\colorspace")
setwd("D:/Udemy_ML")
setws("C:/Users/admin/Downloads")
setwd("C:/Users/admin/Downloads")
install.packages("colorspace_1.3-2.zip")
source("https://CRAN.R-project.org/package=colorspace")
install.packages("colorspace", repos="http://R-Forge.R-project.org")
install.packages('ggplot2', dependencies = TRUE)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
remove.packages('ggplot2')
install.packages("colorspace", repos="http://R-Forge.R-project.org", dependencies = TRUE)
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')+
geom_line(aes(x= training_set$YearsExperience, y= predict(regressor, newdata = training_set),
color= 'blue'))+
ggtitle("Salary vs Experience (Training Set)")+
xlab("Years experience")+
ylabe("Salary")
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')+
geom_line(aes(x= training_set$YearsExperience, y= predict(regressor, newdata = training_set),
color= 'blue'))+
ggtitle("Salary vs Experience (Training Set)")+
xlab("Years experience")+
ylab("Salary")
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')+
geom_line(aes(x= training_set$YearsExperience, y= predict(regressor, newdata = training_set),
color= 'Blue'))+
ggtitle("Salary vs Experience (Training Set)")+
xlab("Years experience")+
ylab("Salary")
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')+
geom_line(aes(x= training_set$YearsExperience, y= predict(regressor, newdata = training_set),
colour= 'blue'))+
ggtitle("Salary vs Experience (Training Set)")+
xlab("Years experience")+
ylab("Salary")
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')+
geom_line(aes(x= training_set$YearsExperience, y= predict(regressor, newdata = training_set),
colour= 'blue'))+
ggtitle("Salary vs Experience (Training Set)")+
xlab("Years experience")+
ylab("Salary")
ggplot()+
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary), colour='red')+
geom_line(aes(x=training_set$YearsExperience , y=predict(regressor, newdata= training_set), colour= 'blue'))+
ggtitle("salary vs experience (test set)")+
xlab("exp")+
ylab("salary")
ggplot() +
geom_point(aes(x= training_set$YearsExperience, y=training_set$Salary),
colour='red')+
geom_line(aes(x= training_set$YearsExperience, y= predict(regressor, newdata = training_set),
colour= 'blue'))+
ggtitle("Salary vs Experience (Training Set)")+
xlab("Years experience")+
ylab("Salary")
setwd("D:/Udemy_ML/Multiple_Linear_Reg/Multiple_Linear_Regression")
dataset = read.csv("50_Startups.csv")
View(dataset)
View(dataset)
dataset$State = factor(dataset$State, levels=c('California','Florida','New York'), labels=c(0,1,2))
View(dataset)
View(dataset)
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 2/3)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
View(dataset)
View(dataset)
View(training_set)
View(training_set)
split = sample.split(dataset$Profit, SplitRatio = 0.2)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
View(training_set)
View(training_set)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
dataset$State = factor(dataset$State, levels=c('California','Florida','New York'), labels=c(1,2,3))
View(dataset)
View(dataset)
dataset = read.csv("50_Startups.csv")
dataset$State = factor(dataset$State, levels=c('California','Florida','New York'), labels=c(1,2,3))
View(dataset)
View(dataset)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(data)
View(data)
View(data)
View(dataset)
View(dataset)
regressor = lm(formula= Profit ~ .,
data=training_set )
View(regressor)
ggplot()
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = training_set)
View(regressor)
y_pred
y_test
y_pred= predict(regressor, newdata = test_set)
y_pred
regressor = lm(formula = Profit ~ R.D.Spend+ Administration + Marketing.Spend +State,
data = dataset)
regressor.summary()
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend+ Administration + Marketing.Spend +State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend+ Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
y_pred= predict(regressor, newdata = test_data)
y_pred= predict(regressor, newdata = test_set)
y_pred
backward_elm<- function(x, sl){
numVars= length(x)
for(i in c(1:numVars)){
regressor = lm(Profit ~ ., data=x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if(maxVar > sl){
j= which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"]==maxVar)
x=x[,-j]
}
numVars= numVars-1
}
return(summary(regressor))
}
sl=0.05
dataset=dataset[,c(1,2,3,4,5)]
backward_elm(dataset, sl)
