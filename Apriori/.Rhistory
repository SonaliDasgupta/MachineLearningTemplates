data = read.csv("C:\\Users\\Admin\Downloads\Data_Preprocessing\\Data.csv")
data = read.csv("C:\\Users\\Admin\\Downloads\\Data_Preprocessing\\Data.csv")
View(data)
dataset = read.csv("C:\\Users\\Admin\\Downloads\\Data_Preprocessing\\Data.csv")
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age, FUN=function(x) mean(x, na.rm = TRUE)), dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)), dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country, levels=c('France','Spain','Germany'), labels=c(1,2,3))
dataset$Purchased = factor(dataset$Purchased, levels=c('Yes','No'), labels=c(1,0))
#Split training and test sets
install.packages('caTools')
library("caTools", lib.loc="C:/Program Files/R/R-3.4.2/library")
library('caTools')
library(caTools)
set.seed(0)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set =subset(dataset, split==TRUE)
View(training_set)
test_set = subset(dataset, split==FALSE)
View(test_set)
test_set = scale(test_set)
View(training_set)
View(training_set)
View(training_set)
test_set[,2:3]= scale(test_set[,2:3])
View(test_set)
View(test_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3]= scale(test_set[,2:3])
View(training_set)
View(training_set)
setwd("D:/Udemy_ML/K_Means")
dataset <- read.csv("Mall_Customers.csv")
dataset <- dataset[,4:6]
dataset <- dataset[,[4,5]]
X <- dataset[4:5]
View(X)
View(X)
plot(1:10, wcss, type='b', main= paste('Clusters of Clients'), xlab= 'Annual Income', ylab='Spending score')
plot(1:10, wcss, type='b', main= paste('Clusters of Clients'), xlab= 'No. clusters', ylab='WCSS')
dataset <- read.csv("Mall_Customers.csv")
X <- dataset[4:5]
#elbow method
set.seed(6)
wcss <- vector()
for(i in 1:10) wcss[i]<- sum(kmeans(X,i)$withinss)
plot(1:10, wcss, type='b', main= paste('Clusters of Clients'), xlab= 'No. clusters', ylab='WCSS')
library("cluster", lib.loc="C:/Program Files/R/R-3.4.2/library")
set.seed(29)
kmeans <- kmeans(X, 5, iter.max=300, nstart=10)
View(kmeans)
View(kmeans)
dataset <- read.csv("Mall_Customers.csv")
X <- dataset[4:5]
#elbow method
set.seed(6)
wcss <- vector()
for(i in 1:10) wcss[i]<- sum(kmeans(X,i)$withinss)
plot(1:10, wcss, type='b', main= paste('Clusters of Clients'), xlab= 'No. clusters', ylab='WCSS')
#kmeans
set.seed(29)
kmeans <- kmeans(X, 5, iter.max=300, nstart=10)
#visualize clusters
library(cluster)
clusplot(X, kmeans$cluster, lines=0, shade= TRUE, labels= 2, plotchar = FALSE, span = TRUE, main=paste('Clusters of Clients'), xlab= 'Annual Income', ylab='Spending Score')
dataset <- read.csv("Mall_Customers.csv")
X <- dataset[4:5]
#dendrogram method
set.seed(6)
dendrogram <- hclust(dist(X, method='euclidean'), method='ward.D')
plot(dendrogram, main= paste('Dendrogram'), xlab= 'Customers', ylab='Euclidean Dist')
hc <-hclust(dist(X, method='euclidean'), method = 'ward.D')
y_hc= cutree(hc, 5)
library(cluster)
clusplot(X, y_hc, lines=0, shade= TRUE, labels= 2, plotchar = FALSE, span = TRUE, main=paste('Clusters of Clients'), xlab= 'Annual Income', ylab='Spending Score')
setwd("D:/Udemy_ML/Apriori")
setwd("D:/Udemy_ML/Apriori")
dataset = read.csv("Market_Basket_Optimization.csv")
dataset = read.csv("Market_Basket_Optimisation.csv")
View(dataset)
View(dataset)
dataset = read.csv("Market_Basket_Optimisation.csv", header=FALSE)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv("Market_Basket_Optimisation.csv")# header=FALSE)
View(dataset)
View(dataset)
dataset = read.csv("Market_Basket_Optimisation.csv", header=FALSE)
View(dataset)
View(dataset)
library(arules)
dataset = read.csv("Market_Basket_Optimisation.csv", header=FALSE)
install.packages('arules')
library(arules)
View(dataset)
View(dataset)
summary(dataset)
dataset= read.transactions("Market_Basket_Optimisation.csv",sep = ',', rm.duplicates = TRUE)
summary(dataset)
itemFrequencyPlot(dataset, topN=100)
itemFrequencyPlot(dataset, topN=10)
rules= apriori(dataset, parameter = list(support= 0.003, confidence= 0.8))
rules= apriori(dataset, parameter = list(support= 0.003, confidence= 0.8))
rules= apriori(dataset, parameter = list(support= 0.003, confidence= 0.7))
rules
rules= apriori(dataset, parameter = list(support= 0.003, confidence= 0.4))
inspect(sort(rules, by='lift')[1:10])
rules= apriori(dataset, parameter = list(support= 0.003, confidence= 0.2))
inspect(sort(rules, by='lift')[1:10])
rules= apriori(dataset, parameter = list(support= 28/7500, confidence= 0.2))
inspect(sort(rules, by='lift')[1:10])
View(dataset)
View(dataset)
