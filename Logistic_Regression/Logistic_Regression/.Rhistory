y_grid= ifelse(prob_set>0.5, 1,0)
plot(set[,-3], main='Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
plot_fn(training_set)
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
prob_set = knn(train= dataset[,-3], test= grid_set, cl=dataset[,3],k=5)
y_grid= ifelse(prob_set>0.5, 1,0)
plot(set[,-3], main='Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
plot_fn(training_set)
plot_fn<- function(dataset, training_set){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
prob_set = knn(train= training_set[,-3], test= grid_set, cl=training_set[,3],k=5)
y_grid= ifelse(prob_set>0.5, 1,0)
plot(set[,-3], main='Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
plot_fn(training_set, training_set)
plot_fn<- function(dataset, training_set){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = knn(train= training_set[,-3], test= grid_set, cl=training_set[,3],k=5)
plot(set[,-3], main='Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
plot_fn(training_set, training_set)
plot_fn(test_set, training_set)
#predict results
prob_pred= predict(classifier, type='response', newdata= test_set)
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
prob_set = predict(classifier, type='response', newdata= grid_set)
y_grid= ifelse(prob_set>0.5, 1,0)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'linear'
)
#predict results
prob_pred= predict(classifier, type='response', newdata= test_set)
y_pred= ifelse(prob_pred>0.5, 1, 0)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
install.packages("caTools")
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
prob_set = predict(classifier, type='response', newdata= grid_set)
y_grid= ifelse(prob_set>0.5, 1,0)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'linear'
)
#predict results
prob_pred= predict(classifier, type='response', newdata= test_set)
y_pred= ifelse(prob_pred>0.5, 1, 0)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'linear'
)
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
setwd("D:/Udemy_ML/SVR")
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
prob_set = predict(classifier, type='response', newdata= grid_set)
y_grid= ifelse(prob_set>0.5, 1,0)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'linear'
)
#predict results
prob_pred= predict(classifier, type='response', newdata= test_set)
y_pred= ifelse(prob_pred>0.5, 1, 0)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
View(dataset)
View(dataset)
setwd("D:/Udemy_ML/Logistic_Regression/Logistic_Regression")
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
prob_set = predict(classifier, type='response', newdata= grid_set)
y_grid= ifelse(prob_set>0.5, 1,0)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'linear'
)
#predict results
prob_pred= predict(classifier, type='response', newdata= test_set)
y_pred= ifelse(prob_pred>0.5, 1, 0)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
View(dataset)
View(dataset)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'linear'
)
prob_pred= predict(classifier, type='response', newdata= test_set)
prob_pred
y_pred= predict(classifier, type='response', newdata= test_set)
y_pred
cm = table(test_set[,3], y_pred)
plot_fn(training_set)
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = predict(classifier, type='response', newdata= grid_set)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
plot_fn(training_set)
plot_fn(test_set)
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = predict(classifier, type='response', newdata= grid_set)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'rbf'
)
#predict results
y_pred= predict(classifier, type='response', newdata= test_set)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = predict(classifier, type='response', newdata= grid_set)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'radial basis'
)
#predict results
y_pred= predict(classifier, type='response', newdata= test_set)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = predict(classifier, type='response', newdata= grid_set)
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = predict(classifier, type='response', newdata= grid_set)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'radial'
)
#predict results
y_pred= predict(classifier, type='response', newdata= test_set)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
cm
}
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = predict(classifier, type='response', newdata= grid_set)
plot(set[,-3], main='SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'radial'
)
#predict results
y_pred= predict(classifier, type='response', newdata= test_set)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
plot(set[,-3], main='Kernel SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
plot_fn<- function(dataset){
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = dataset
X1= seq(min(set[,1])-1, max(set[,1])+1, by=0.01)
X2= seq(min(set[,2])-1, max(set[,2])+1, by=0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set)= c('Age','EstimatedSalary')
y_grid = predict(classifier, type='response', newdata= grid_set)
plot(set[,-3], main='Kernel SVM Classfication', xlab= 'Age', ylab='Estimated Salary',
xlim= range(X1), ylim=range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add=TRUE)
points(grid_set, pch='.', col=ifelse(y_grid==1, 'blue', 'tomato'))
points(set, pch=21, bg= ifelse(set[,3]==1, 'green4', 'red3'))
}
dataset = read.csv("Social_Network_Ads.csv")
dataset = dataset[,3:5]
#Split training and test sets
#install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 3/4)
training_set =subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2]= scale(test_set[,1:2])
#classifier
library(e1071)
classifier= svm(formula= Purchased ~ .,
data= training_set,
type= 'C-classification',
kernel= 'radial'
)
#predict results
y_pred= predict(classifier, type='response', newdata= test_set)
#confusion matrix
cm = table(test_set[,3], y_pred)
#plot training set results
plot_fn(training_set)
#test set visualization
plot_fn(test_set)
